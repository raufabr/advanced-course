{"ast":null,"code":"var _isArray = /*#__PURE__*/require('./_isArray');\n\nvar _isTransformer = /*#__PURE__*/require('./_isTransformer');\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\n\nfunction _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}\n\nmodule.exports = _dispatchable;","map":{"version":3,"sources":["/Users/abrarrauf/Desktop/tutorials/advanced-course/frontend/node_modules/ramda/src/internal/_dispatchable.js"],"names":["_isArray","require","_isTransformer","_dispatchable","methodNames","xf","fn","arguments","length","args","Array","prototype","slice","call","obj","pop","idx","apply","transducer","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,aAAaC,OAAO,CAAC,YAAD,CAAnC;;AAEA,IAAIC,cAAc,GAAG,aAAaD,OAAO,CAAC,kBAAD,CAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,aAAT,CAAuBC,WAAvB,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4C;AAC1C,SAAO,YAAY;AACjB,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,aAAOF,EAAE,EAAT;AACD;;AACD,QAAIG,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,SAA3B,EAAsC,CAAtC,CAAX;AACA,QAAIO,GAAG,GAAGL,IAAI,CAACM,GAAL,EAAV;;AACA,QAAI,CAACf,QAAQ,CAACc,GAAD,CAAb,EAAoB;AAClB,UAAIE,GAAG,GAAG,CAAV;;AACA,aAAOA,GAAG,GAAGZ,WAAW,CAACI,MAAzB,EAAiC;AAC/B,YAAI,OAAOM,GAAG,CAACV,WAAW,CAACY,GAAD,CAAZ,CAAV,KAAiC,UAArC,EAAiD;AAC/C,iBAAOF,GAAG,CAACV,WAAW,CAACY,GAAD,CAAZ,CAAH,CAAsBC,KAAtB,CAA4BH,GAA5B,EAAiCL,IAAjC,CAAP;AACD;;AACDO,QAAAA,GAAG,IAAI,CAAP;AACD;;AACD,UAAId,cAAc,CAACY,GAAD,CAAlB,EAAyB;AACvB,YAAII,UAAU,GAAGb,EAAE,CAACY,KAAH,CAAS,IAAT,EAAeR,IAAf,CAAjB;AACA,eAAOS,UAAU,CAACJ,GAAD,CAAjB;AACD;AACF;;AACD,WAAOR,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeV,SAAf,CAAP;AACD,GApBD;AAqBD;;AACDY,MAAM,CAACC,OAAP,GAAiBjB,aAAjB","sourcesContent":["var _isArray = /*#__PURE__*/require('./_isArray');\n\nvar _isTransformer = /*#__PURE__*/require('./_isTransformer');\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\n\nfunction _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n}\nmodule.exports = _dispatchable;"]},"metadata":{},"sourceType":"script"}
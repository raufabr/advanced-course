{"ast":null,"code":"var _isArray = /*#__PURE__*/require('./_isArray');\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\n\nfunction _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n\n    if (length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\n\nmodule.exports = _checkForMethod;","map":{"version":3,"sources":["/Users/abrarrauf/Desktop/tutorials/advanced-course/frontend/node_modules/ramda/src/internal/_checkForMethod.js"],"names":["_isArray","require","_checkForMethod","methodname","fn","length","arguments","obj","apply","Array","prototype","slice","call","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,aAAaC,OAAO,CAAC,YAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,eAAT,CAAyBC,UAAzB,EAAqCC,EAArC,EAAyC;AACvC,SAAO,YAAY;AACjB,QAAIC,MAAM,GAAGC,SAAS,CAACD,MAAvB;;AACA,QAAIA,MAAM,KAAK,CAAf,EAAkB;AAChB,aAAOD,EAAE,EAAT;AACD;;AACD,QAAIG,GAAG,GAAGD,SAAS,CAACD,MAAM,GAAG,CAAV,CAAnB;AACA,WAAOL,QAAQ,CAACO,GAAD,CAAR,IAAiB,OAAOA,GAAG,CAACJ,UAAD,CAAV,KAA2B,UAA5C,GAAyDC,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeF,SAAf,CAAzD,GAAqFC,GAAG,CAACJ,UAAD,CAAH,CAAgBK,KAAhB,CAAsBD,GAAtB,EAA2BE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,SAA3B,EAAsC,CAAtC,EAAyCD,MAAM,GAAG,CAAlD,CAA3B,CAA5F;AACD,GAPD;AAQD;;AACDQ,MAAM,CAACC,OAAP,GAAiBZ,eAAjB","sourcesContent":["var _isArray = /*#__PURE__*/require('./_isArray');\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\n\nfunction _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\nmodule.exports = _checkForMethod;"]},"metadata":{},"sourceType":"script"}
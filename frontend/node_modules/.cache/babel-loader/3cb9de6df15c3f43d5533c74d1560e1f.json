{"ast":null,"code":"var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');\n\nvar _map = /*#__PURE__*/require('./internal/_map');\n\nvar _reduce = /*#__PURE__*/require('./internal/_reduce');\n\nvar _xmap = /*#__PURE__*/require('./internal/_xmap');\n\nvar curryN = /*#__PURE__*/require('./curryN');\n\nvar keys = /*#__PURE__*/require('./keys');\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\n\n\nvar map = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function () {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n\n    case '[object Object]':\n      return _reduce(function (acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n\n    default:\n      return _map(fn, functor);\n  }\n}));\n\nmodule.exports = map;","map":{"version":3,"sources":["/Users/abrarrauf/Desktop/tutorials/advanced-course/frontend/node_modules/ramda/src/map.js"],"names":["_curry2","require","_dispatchable","_map","_reduce","_xmap","curryN","keys","map","fn","functor","Object","prototype","toString","call","length","apply","arguments","acc","key","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAG,aAAaC,OAAO,CAAC,oBAAD,CAAlC;;AAEA,IAAIC,aAAa,GAAG,aAAaD,OAAO,CAAC,0BAAD,CAAxC;;AAEA,IAAIE,IAAI,GAAG,aAAaF,OAAO,CAAC,iBAAD,CAA/B;;AAEA,IAAIG,OAAO,GAAG,aAAaH,OAAO,CAAC,oBAAD,CAAlC;;AAEA,IAAII,KAAK,GAAG,aAAaJ,OAAO,CAAC,kBAAD,CAAhC;;AAEA,IAAIK,MAAM,GAAG,aAAaL,OAAO,CAAC,UAAD,CAAjC;;AAEA,IAAIM,IAAI,GAAG,aAAaN,OAAO,CAAC,QAAD,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIO,GAAG,GAAG,aAAaR,OAAO,EAAE,aAAaE,aAAa,CAAC,CAAC,kBAAD,EAAqB,KAArB,CAAD,EAA8BG,KAA9B,EAAqC,SAASG,GAAT,CAAaC,EAAb,EAAiBC,OAAjB,EAA0B;AACvH,UAAQC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,OAA/B,CAAR;AACE,SAAK,mBAAL;AACE,aAAOJ,MAAM,CAACI,OAAO,CAACK,MAAT,EAAiB,YAAY;AACxC,eAAON,EAAE,CAACK,IAAH,CAAQ,IAAR,EAAcJ,OAAO,CAACM,KAAR,CAAc,IAAd,EAAoBC,SAApB,CAAd,CAAP;AACD,OAFY,CAAb;;AAGF,SAAK,iBAAL;AACE,aAAOb,OAAO,CAAC,UAAUc,GAAV,EAAeC,GAAf,EAAoB;AACjCD,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWV,EAAE,CAACC,OAAO,CAACS,GAAD,CAAR,CAAb;AACA,eAAOD,GAAP;AACD,OAHa,EAGX,EAHW,EAGPX,IAAI,CAACG,OAAD,CAHG,CAAd;;AAIF;AACE,aAAOP,IAAI,CAACM,EAAD,EAAKC,OAAL,CAAX;AAXJ;AAaD,CAdyD,CAA5B,CAA9B;;AAeAU,MAAM,CAACC,OAAP,GAAiBb,GAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _dispatchable = /*#__PURE__*/require('./internal/_dispatchable');\n\nvar _map = /*#__PURE__*/require('./internal/_map');\n\nvar _reduce = /*#__PURE__*/require('./internal/_reduce');\n\nvar _xmap = /*#__PURE__*/require('./internal/_xmap');\n\nvar curryN = /*#__PURE__*/require('./curryN');\n\nvar keys = /*#__PURE__*/require('./keys');\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\n\n\nvar map = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function () {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function (acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\nmodule.exports = map;"]},"metadata":{},"sourceType":"script"}
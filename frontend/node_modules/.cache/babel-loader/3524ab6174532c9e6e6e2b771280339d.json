{"ast":null,"code":"var _arity = /*#__PURE__*/require('./internal/_arity');\n\nvar _pipeP = /*#__PURE__*/require('./internal/_pipeP');\n\nvar reduce = /*#__PURE__*/require('./reduce');\n\nvar tail = /*#__PURE__*/require('./tail');\n/**\n * Performs left-to-right composition of one or more Promise-returning\n * functions. The leftmost function may have any arity; the remaining functions\n * must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.composeP\n * @example\n *\n *      //  followersForUser :: String -> Promise [User]\n *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n */\n\n\nfunction pipeP() {\n  if (arguments.length === 0) {\n    throw new Error('pipeP requires at least one argument');\n  }\n\n  return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n}\n\nmodule.exports = pipeP;","map":{"version":3,"sources":["/Users/abrarrauf/Desktop/tutorials/advanced-course/frontend/node_modules/ramda/src/pipeP.js"],"names":["_arity","require","_pipeP","reduce","tail","pipeP","arguments","length","Error","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAG,aAAaC,OAAO,CAAC,mBAAD,CAAjC;;AAEA,IAAIC,MAAM,GAAG,aAAaD,OAAO,CAAC,mBAAD,CAAjC;;AAEA,IAAIE,MAAM,GAAG,aAAaF,OAAO,CAAC,UAAD,CAAjC;;AAEA,IAAIG,IAAI,GAAG,aAAaH,OAAO,CAAC,QAAD,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASI,KAAT,GAAiB;AACf,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,SAAOR,MAAM,CAACM,SAAS,CAAC,CAAD,CAAT,CAAaC,MAAd,EAAsBJ,MAAM,CAACD,MAAD,EAASI,SAAS,CAAC,CAAD,CAAlB,EAAuBF,IAAI,CAACE,SAAD,CAA3B,CAA5B,CAAb;AACD;;AACDG,MAAM,CAACC,OAAP,GAAiBL,KAAjB","sourcesContent":["var _arity = /*#__PURE__*/require('./internal/_arity');\n\nvar _pipeP = /*#__PURE__*/require('./internal/_pipeP');\n\nvar reduce = /*#__PURE__*/require('./reduce');\n\nvar tail = /*#__PURE__*/require('./tail');\n\n/**\n * Performs left-to-right composition of one or more Promise-returning\n * functions. The leftmost function may have any arity; the remaining functions\n * must be unary.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.composeP\n * @example\n *\n *      //  followersForUser :: String -> Promise [User]\n *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n */\n\n\nfunction pipeP() {\n  if (arguments.length === 0) {\n    throw new Error('pipeP requires at least one argument');\n  }\n  return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n}\nmodule.exports = pipeP;"]},"metadata":{},"sourceType":"script"}